# -*- coding: utf-8 -*-
"""Taller2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bJGXvRknhtsHTLmmD9VA8hnDDdpx0EBY

# Taller #2
###Es este codigo se realizo los primero tres ejercicios solicitados en el docuemnto que son los siguientes:

##Ejercicio 1: Personalizar Mensajes de Bienvenida
##Ejercicio 2: Determinando la Generación
##Ejercicio 3: Verificar Condiciones Especiales
"""

def DeterG(edad):                            # Ejercicio #2
    if edad >= 77:
        return "Generación Silenciosa"
    elif 59 <= edad <= 76:                                # Se Amplio la funcionalidad del código para determinar a qué generación
                                                          # pertenece la persona (Generación Z, Millennial, etc.).

        return "Baby Boomer"
    elif 43 <= edad <= 58:
        return "Generación X"
    elif 27 <= edad <= 42:
        return "Millennial"
    elif 11 <= edad <= 26:
        return "Generación Z"
    else:
        return "Generación Alpha"


def NumRedondo(edad):            # Ejericio #3
    return edad % 10 == 0        # Se Agrego una función que verifique si la edad de la persona es un
                                 # número redondo (como 20, 30, 40, etc.).


# Solicitar la edad a usario
edad = int(input("Introduce tu edad: "))  # Ejercicio #1

generacion =DeterG(edad)

# Verificar si la persona es mayor de edad
if edad >= 18:
    print("¡Felicidades! Ya te puedes poner chambear.")
    print(f"Perteneces a la generacion: {generacion}")
else:                                                        # Se Creo un programa para personalizar el mensaje de bienvenida según
                                                             # la edad de la persona.

    YearFaltan = 18 - edad
    print(f"Aún no eres mayor de edad. Faltan {YearFaltan} años para que lo seas. Ponte a estudiar la vida adulta esta potente")
    print(f"Perteneces a la generacion: {generacion}")

if NumRedondo(edad): # Aqui enviar el mensaje especial si cumple con un numeor redondo
   print("¡Además, has alcanzado una edad especial!")

"""##Ejercicio 4: Lista de Contactos"""

contactos = {}    # Diccionario vacio, Este Diccionario lo llena el usuario

# Función para agregar un contacto
def AgCont():
    nombre = input("Ingresa el nombre del contacto: ")
    telefono = input("Ingresa el teléfono del contacto: ")
    contactos[nombre] = telefono
    print(f"Contacto {nombre} agregado.")

# Función para buscar un contacto por nombre
def BusCont():
    nombre = input("Ingresa el nombre del contacto a buscar: ")
    if nombre in contactos:
        print(f"El teléfono de {nombre} es {contactos[nombre]}.")
    else:
        print(f"El contacto {nombre} no existe.")

# Función para mostrar todos los contactos
def MostCont():
    if contactos:
        print("Lista de contactos:")
        for nombre, telefono in contactos.items():
            print(f"Nombre: {nombre}, Teléfono: {telefono}")
    else:
        print("No hay contactos en la lista.")

# Función para editar un contacto existente
def Editar():
    nombre = input("Ingresa el nombre del contacto a editar: ")
    if nombre in contactos:
        nuevo_telefono = input(f"Ingresa el nuevo teléfono para {nombre}: ")
        contactos[nombre] = nuevo_telefono
        print(f"Contacto {nombre} actualizado.")
    else:
        print(f"El contacto {nombre} no existe.")

# Menú para gestionar las acciones
while True:
    print("\nGestor de Contactos")
    print("1. Agregar Contacto")
    print("2. Buscar Contacto")
    print("3. Mostrar Contactos")
    print("4. Editar Contacto")
    print("5. Salir")

    opcion = input("Elige una opción: ")

    if opcion == "1":
        AgCont()
    elif opcion == "2":
        BusCont()
    elif opcion == "3":
       MostCont()
    elif opcion == "4":
        Editar()
    elif opcion == "5":
        print("Saliendo del programa.")
        break
    else:
        print("Opción no válida, por favor elige nuevamente.")

"""## Ejercicio 5: Organizando una Fiesta"""

invitados = []

# Función para agregar un invitado
def Agregar():
    nombre = input("Ingresa el nombre del invitado: ")
    invitados.append(nombre)
    print(f"Invitado {nombre} agregado.")

# Función para eliminar un invitado
def Eliminar():
    nombre = input("Ingresa el nombre del invitado a eliminar: ")
    if nombre in invitados:
        invitados.remove(nombre)
        print(f"Invitado {nombre} eliminado.")
    else:
        print(f"El invitado {nombre} no está en la lista.")

# Función para verificar si un invitado está en la lista
def Verificar():
    nombre = input("Ingresa el nombre del invitado a verificar: ")
    if nombre in invitados:
        print(f"{nombre} está en la lista de invitados.")
    else:
        print(f"{nombre} no está en la lista de invitados.")

# Función para editar el nombre de un invitado
def Editar():
    nombre = input("Ingresa el nombre del invitado a editar: ")
    if nombre in invitados:
        Nuevo = input(f"Ingresa el nuevo nombre para {nombre}: ")
        indice = invitados.index(nombre)
        invitados[indice] = Nuevo
        print(f"El nombre del invitado ha sido cambiado a {Nuevo}.")
    else:
        print(f"El invitado {nombre} no está en la lista.")

# Menú para gestionar las acciones
while True:
    print("\nGestor de Invitados")
    print("1. Agregar Invitado")
    print("2. Eliminar Invitado")
    print("3. Verificar Invitado")
    print("4. Editar Invitado")
    print("5. Salir")

    opcion = input("Elige una opción: ")

    if opcion == "1":
        Agregar()
    elif opcion == "2":
        Eliminar()
    elif opcion == "3":
        Verificar()
    elif opcion == "4":
        Editar()
    elif opcion == "5":
        print("Saliendo del programa.")
        break
    else:
        print("Opción no válida, por favor elige nuevamente.")